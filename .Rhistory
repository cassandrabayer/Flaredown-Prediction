.(checkin_date, age, trackable_value)][order(checkin_date)]
timeseriesDt[, lapply(.SD, as.integer), .SDcols = c("age", "trackable_value")]
timeseriesDt
myts <- ts(timeseriesDt[, c(2:ncol(timeseriesDt))], start = c(2015, 8), frequency = 12)
myts
timeseriesDt[, c(2:ncol(timeseriesDt))]
timeseriesDt[, c(,2:ncol(timeseriesDt))]
timeseriesDt[, c(2:ncol(timeseriesDt))]
timeseriesDt[,]
timeseriesDt[,2:3]
myts <- ts(timeseriesDt[,2:3], start = c(2015, 8), frequency = 12)
myts
autoplot(myts, facets = F)
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), .N, by = trackable_name][order(N)]
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), .N, by = trackable_name][order(N)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, .N, by = trackable_name]
timeseriesDt[, N := NULL]
dcast(timeseriesDt, trackable_value ~ trackable_name)
dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value")
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt
timeseriesDt
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value")
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt
timeseriesDt[,2:ncol(timeseriesDt)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8), frequency = 12)
myts
autoplot(myts, facets = T)
timeseriesDt <- timeseriesDt[order(checkin_date)]
timeseriesDt
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8), frequency = 3)
myts
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8), frequency = 12)
myts
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 4), frequency = 12)
myts
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8), frequency = 12)
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8), frequency = 12)
myts
timeseriesDt
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8), frequency = 12,end = c(2018, 3))
myts
autoplot(myts, facets = T)
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 30,end = c(2018, 3, 5))
myts
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 12,end = c(2018, 3, 5))
myts
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
myts
autoplot(myts, facets = T)
autoplot(myts, facets = F)
install.packages("fpp2")
library(fpp2)
installed.packages("fpp2")
library(fpp2)
# visualization packages
library(ggplot2)
installed.packages("fpp2")
install.packages("fpp2")
library(forecast)
install.packages("fpp2")
# visualization packages
library(ggplot2)
library(forecast)
library(fpp2)
install.packages("devtools")
devtools::install_github("robjhyndman/fpp2-package")
library(fpp2)
install.packages("fpp2", dependencies = T)
library(fpp2)
install.packages("fpp2", dependencies = T)
ggseasonplot()
autoplot(myts, facets = T)
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value")
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
autoplot(myts, facets = T)
source('~/Desktop/Flaredown Prediction/Flaredown-Prediction/Controller.R')
fd
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value")
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
autoplot(myts, facets = T)
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
fd[, .N, by = user_id][order(N)]
fd[user_id-- "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ==", uniqueN(checkin_date)]
fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ==", uniqueN(checkin_date)]
983/365
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt
timeseriesDt[order(N)]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, N := NULL]
timeseriesDt[, .N, by = trackable_name]
timeseriesDt
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value")
timeseriesDt
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value")
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean(na.rm = T))
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean)
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean)
timeseriesDt
complete.cases(timeseriesDt)
timeseriesDt[complete.cases(timeseriesDt)]
timeseriesDt <-  timeseriesDt[complete.cases(timeseriesDt)]
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
autoplot(myts, facets = T)
timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2016, 10, 06), frequency = 365,end = c(2017, 6, 15))xx
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2016, 10, 06), frequency = 365,end = c(2017, 6, 15))
autoplot(myts, facets = T)
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>800]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean)
timeseriesDt <-  timeseriesDt[complete.cases(timeseriesDt)]
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
autoplot(myts, facets = T)
autoplot(myts, facets = F)
forecast(object = myts)
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 1,end = c(2018, 3, 5))
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365.25,end = c(2018, 3, 5))
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>800]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean)
timeseriesDt <-  timeseriesDt[complete.cases(timeseriesDt)]
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365.25,end = c(2018, 3, 5))
timeseriesDt[order(checkin_date)]
timeseriesDt[,2:ncol(timeseriesDt)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365.25,end = c(2018, 3, 5))
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>800]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean)
timeseriesDt <-  timeseriesDt[complete.cases(timeseriesDt)]
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
myts
myts2 <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 1, end = c(2018, 3, 5))
# Date: 06/28/18
# Objective: Create a preliminary timeseries analysis for predicting flares
# Sample timeseries -------------------------------------------------------------------------------------
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>800]
timeseriesDt[, N := NULL]
timeseriesDt <- dcast(timeseriesDt, checkin_date ~ trackable_name, value.var = "trackable_value",
fun.aggregate = mean)
timeseriesDt <-  timeseriesDt[complete.cases(timeseriesDt)]
timeseriesDt[, lapply(.SD, as.integer), .SDcols = names(timeseriesDt[, 2:ncol(timeseriesDt)])]
timeseriesDt <- timeseriesDt[order(checkin_date)]
timeseriesDt[order(checkin_date)]
myts <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
myts2 <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 1, end = c(2018, 3, 5))
myts2 <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365, end = c(2018, 3, 5))
ggAcf(myts)
myts2 <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 3), frequency = 12,end = c(2018, 1))
myts2
# Futzing around with seasonality -----------------------------------------------------------------------
decomp <- decompose()
# Futzing around with seasonality -----------------------------------------------------------------------
decomp <- decompose(myts)
decomp
plot(decomp)
autoplot(decomp,)
plot(decomp$seasonal)
## 2
fit <- stl(myts, s.window="period")
## 2
fit <- stl(myts)
myts2 <- ts(timeseriesDt[, 2:3],  start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
## 2
fit <- stl(myts2, s.window="period")
timeseriesDt2 <-timeseriesDt[, checkin_date := as.integer(checkin_date)]
myts2 <- ts(timeseriesDt2[, 2:ncol(timeseriesDt2)],  start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
## 2
fit <- stl(myts2, s.window="period")
myts2
## 2
fit <- stl(myts2)
myts2 <- ts(timeseriesDt2[[1]],  start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
## 2
fit <- stl(myts2, s.window="period")
plot(fit)
## 2
fit <- stl(myts2, s.window="season")
myts2 <- ts(timeseriesDt2[[1]],  start = c(2015, 8, 30), frequency = 12,end = c(2018, 3, 5))
myts2
## 2
fit <- stl(myts2, s.window="period")
plot(fit)
mytsMonth <- ts(timeseriesDt2[[1]],  start = c(2015, 8, 30), frequency = 12,end = c(2018, 3, 5))
## 2
fit <- stl(mytsMonth, s.window="period")
plot(fit)
monthplot(mytsMonth)
seasonplot(mytsMonth)
seasonplot(mytsDay)
## by day, month
mytsDay <- ts(timeseriesDt[,2:ncol(timeseriesDt)], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
seasonplot(mytsDay)
mytsMonth2 <- ts(timeseriesDt2[, 2:ncol(timeseriesDt)],  start = c(2015, 8, 30), frequency = 12,end = c(2018, 3, 5))
seasonplot(mytsMonth2)
seasonplot(mytsMonth)
## 2
fit <- stl(mytsMonth, s.window="period")
plot(fit)
mytsMonth2
mytsMonth
## 4
ets(mytsMonth)
## 4
plots(ets(mytsMonth))
## 4
plot(ets(mytsMonth))
plot(ets(mytsMonth2))
ts(timeseriesDt2[, 2:ncol(timeseriesDt)], frequency = 32)
test <- ts(timeseriesDt2[, 2:ncol(timeseriesDt)], frequency = 32)
fit <- tbats(test)
test <- ts(timeseriesDt2[[1]], frequency = 32)
test
test <- ts(timeseriesDt2[[1]], frequency = 12)
test
test <- ts(timeseriesDt[[1]], frequency = 12)
test
test <- ts(timeseriesDt[[2]], frequency = 12)
test
fit <- tbats(test)
seasonal <- !is.null(fit$seasonal)
seasonal
plot(fit)
seasonplot(fit)
timeseriesDt[[2]]
timeseriesDt[2]
dim(myts)
as.vector(timeseriesDt)
## 4 Detecting seasonality
test <- ts(as.vector(timeseriesDt), frequency = 12)
fit <- tbats(test)
test
class(test)
## 4 Detecting seasonality
test <- ts(t(as.vector(timeseriesDt)), frequency = 12)
fit <- tbats(test)
test
## 4 Detecting seasonality
test <- ts(timeseriesDt$`ulcerative colitis`, frequency = 12)
fit <- tbats(test)
seasonal <- !is.null(fit$seasonal)
seasonal
seasonplot(test)
# Futzing around with seasonality -----------------------------------------------------------------------
## 1 decomposing into trend, pattern, season
decomp <- decompose(mytsDay)
decomp
mytsDay
# Futzing around with seasonality -----------------------------------------------------------------------
## 1 decomposing into trend, pattern, season
decomp <- decompose(mytsDay$`ulcerative colitis`)
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ==" &
trackable_name == "ulcerative colitis"][order(checkin_date)]
timeseriesDt
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ==" &
trackable_name == "ulcerative colitis", .(checkin_date, trackable_value)][order(checkin_date)]
class(timeseriesDt$trackable_value)
## by day, month
mytsDay <- ts(timeseriesDt[,2], start = c(2015, 8, 30), frequency = 365,end = c(2018, 3, 5))
autoplot(mytsDay, facets = T)
mytsMonth <- ts(timeseriesDt[,2], start = c(2015, 8), frequency = 12,end = c(2018, 3))
mytsMonth
autoplot(mytsDay, facets = F)
autoplot(mytsDay, facets = T)
autoplot(mytsMonth, facets = T)
# Futzing around with seasonality -----------------------------------------------------------------------
## 1 decomposing into trend, pattern, season
decomp <- decompose(mytsDay)
decomp
autoplot(decomp)
plot(decomp$seasonal)
## 2 seasonal trends
fit <- stl(mytsMonth, s.window="period")
plot(fit)
seasonplot(mytsMonth)
##2a. deseasonalize
seasadj(fit)
##2a. deseasonalize
plot(seasadj(fit))
##2b. test whether the data is seasonal
adf.test(myts) # p-value < 0.05 indicates the TS is stationary
##2b. test whether the data is seasonal
library(tseries)
adf.test(myts) # p-value < 0.05 indicates the TS is stationary
adf.test(mytsMonth)
# Pre-processing ----------------------------------------------------------------------------------------
source("Controller.R")
getwd()
source('~/DataScience/visionarieskaggle/relationshipAnalysis/fdRelationshipAnalysis/timeseries.R')
# Date: 06/28/18
# Objective: Create a preliminary timeseries analysis for predicting flares
getwd()
# Date: 06/28/18
# Objective: Create a preliminary timeseries analysis for predicting flares
setwd("/Users/cassandrabayer/Desktop/Flaredown Prediction/Flaredown-Prediction")
# Pre-processing ----------------------------------------------------------------------------------------
setwd("/Users/cassandrabayer/Desktop/Flaredown Prediction/Flaredown-Prediction")
timeseriesDt <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
timeseriesDt[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
timeseriesDt <- timeseriesDt[N>500]
arimaFD <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
arimaFD[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
arimaFD <- arimaFD[N>500]
ggplot(arimaFD, aes(checkin_date, trackable_value)) +
geom_line() +
scale_x_date('month') +
ylab("Trackable Value over the Months")
ggplot(arimaFD, aes(checkin_date, trackable_value)) +
geom_point() +
scale_x_date('day') +
ylab("Trackable Value over the Months")
ggplot(arimaFD, aes(checkin_date, trackable_value)) +
geom_point() +
scale_x_date('day') +
ylab("Trackable Value over the Months") + geom_smooth()
valueTs <- ts(arimaFD[, c('trackable_value')])
valueTs
# let's try smoothing it out
tsclean(arimaFd)
# let's try smoothing it out
tsclean(arimaFD)
tsclean(valueTs)
valueTs <- tsclean(valueTs)
arimaFD <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
arimaFD[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
arimaFD <- arimaFD[N>500]
# Initial inspection ------------------------------------------------------------------------------------
ggplot(arimaFD, aes(checkin_date, trackable_value)) +
geom_point() +
scale_x_date('day') +
ylab("Trackable Value over the Months") + geom_smooth()
# let's try smoothing it out
valueTs <- ts(arimaFD[, c('trackable_value')])
arimaFD[, cleanTrackVal := tsclean(trackable_value)]
ggplot() +
geom_line(data = arimaFD,
aes(x = checkin_date, y = cleanTrackVal)) +
ylab('Trackable Value over the Months')
ggplot() +
geom_point(data = arimaFD,
aes(x = checkin_date, y = cleanTrackVal)) +
ylab('Trackable Value over the Months')
ggplot() +
geom_point(data = arimaFD,
aes(x = checkin_date, y = cleanTrackVal)) +
ylab('Trackable Value over the Months') + geom_smooth()
## out of curiosity, I want to do it by month to get a continuious value
arimaFDMonth <- arimaFD[, month := months(checkin_date)]
arimaFDMonth[, .(valByMonth := mean(trackable_value, na.rm = T)),
by = .(month, trackable_name)]
arimaFDMonth[, .(valByMonth = mean(trackable_value, na.rm = T)),
by = .(month, trackable_name)]
arimaFDMonth <- arimaFDMonth[, .(valByMonth = mean(trackable_value, na.rm = T)),
by = .(month, trackable_name)]
arimaFDMonth <- arimaFD[, month := months(checkin_date)]
arimaFDMonthCondition <- arimaFDMonth[, .(valByMonth = mean(trackable_value, na.rm = T)),
by = .(month, trackable_name)]
arimaFDMonthCondition[, .(valByMonth = mean(valByMonth, na.rm = T)),
by = month]
arimaFDMonth <- arimaFDMonthCondition[, .(valByMonth = mean(valByMonth, na.rm = T)),
by = month]
ggplot() +
geom_point(data = arimaFDMonthCondition,
aes(x = month, y = valByMonth)) +
ylab('Trackable Value over the Months') + geom_smooth()
ggplot() +
geom_point(data = arimaFDMonth,
aes(x = month, y = valByMonth)) +
ylab('Trackable Value over the Months') + geom_smooth()
ggplot() +
geom_line(data = arimaFDMonth,
aes(x = month, y = valByMonth)) +
ylab('Trackable Value over the Months') + geom_smooth()
source('~/Desktop/Flaredown Prediction/Flaredown-Prediction/arima.R')
## Doesn't look much better-- let's calculate the moving average
arimaFD[, movingAvgWk := ma(trackable_value, order = 7)]
arimaFD[, movingAvgMonth := ma(trackable_value, order = 30)]
names(arimaFD)
arimaFD[, movingAvgWk := ma(cleanTrackVal, order = 7)]
arimaFD[, movingAvgMonth := ma(cleanTrackVal, order = 30)]
ggplot() +
geom_line(data = daily_data, aes(x = checkin_date, y = trackable_value, colour = "Counts")) +
geom_line(data = daily_data, aes(x = checkin_date, y = movingAvgWk,   colour = "Weekly Moving Average"))  +
geom_line(data = daily_data, aes(x = checkin_date, y = movingAvgMonth, colour = "Monthly Moving Average"))  +
ylab('Trackable Value')
ggplot() +
geom_line(data = arimaFD, aes(x = checkin_date, y = trackable_value, colour = "Counts")) +
geom_line(data = arimaFD, aes(x = checkin_date, y = movingAvgWk,   colour = "Weekly Moving Average"))  +
geom_line(data = arimaFD, aes(x = checkin_date, y = movingAvgMonth, colour = "Monthly Moving Average"))  +
ylab('Trackable Value')
arimaFD
source('~/Desktop/Flaredown Prediction/Flaredown-Prediction/arima.R')
source('~/Desktop/Flaredown Prediction/Flaredown-Prediction/arima.R')
names(arimaFd)
names(arimaFD)
arimaFD <- fd[user_id == "QEVuQwEAlNMIH8RXhjZvx6HzoW8iXQ=="][order(checkin_date)]
arimaFD[trackable_type %in% c("Condition", "Symptom"), N := .N, by = trackable_name]
arimaFD <- arimaFD[N>500]
# Initial inspection ------------------------------------------------------------------------------------
ggplot(arimaFD, aes(checkin_date, trackable_value)) +
geom_point() +
scale_x_date('day') +
ylab("Trackable Value over the Months") + geom_smooth()
# let's try smoothing it out
valueTs <- ts(arimaFD[, c('trackable_value')])
arimaFD[, cleanTrackVal := tsclean(trackable_value)]
ggplot() +
geom_point(data = arimaFD,
aes(x = checkin_date, y = cleanTrackVal)) +
ylab('Trackable Value over the Months') + geom_smooth()
## out of curiosity, I want to do it by month to get a continuious value
arimaFDMonth <- arimaFD[, month := months(checkin_date)]
arimaFDMonthCondition <- arimaFDMonth[, .(valByMonth = mean(trackable_value, na.rm = T)),
by = .(month, trackable_name)]
arimaFDMonth <- arimaFDMonthCondition[, .(valByMonth = mean(valByMonth, na.rm = T)),
by = month]
### all conditions
ggplot() +
geom_point(data = arimaFDMonthCondition,
aes(x = month, y = valByMonth)) +
ylab('Trackable Value over the Months') + geom_smooth()
### one condition
ggplot() +
geom_(data = arimaFDMonth,
aes(x = month, y = valByMonth)) +
ylab('Trackable Value over the Months') + geom_smooth()
## Doesn't look much better-- let's calculate the moving average
arimaFD[, movingAvgWk := ma(cleanTrackVal, order = 7)]
arimaFD[, movingAvgMonth := ma(cleanTrackVal, order = 30)]
ggplot() +
geom_line(data = arimaFD, aes(x = checkin_date, y = trackable_value, colour = "Counts")) +
geom_line(data = arimaFD, aes(x = checkin_date, y = movingAvgWk,   colour = "Weekly Moving Average"))  +
geom_line(data = arimaFD, aes(x = checkin_date, y = movingAvgMonth, colour = "Monthly Moving Average"))  +
ylab('Trackable Value')
## Values fo
ggplot() +
geom_line(data = arimaFD[!is.na(movingAvgMonth) & !is.na(movingAvgWk)], aes(x = checkin_date, y = trackable_value, colour = "Counts")) +
geom_line(data = arimaFD[!is.na(movingAvgMonth) & !is.na(movingAvgWk)], aes(x = checkin_date, y = movingAvgWk,   colour = "Weekly Moving Average"))  +
geom_line(data = arimaFD[!is.na(movingAvgMonth) & !is.na(movingAvgWk)], aes(x = checkin_date, y = movingAvgMonth, colour = "Monthly Moving Average"))  +
ylab('Trackable Value')
## Values for moving average look weird. Let's clean up and decompose
decompFd <-  ts(na.omit(arimaFD$movingAvgWk), frequency=52)
decompFd
decomp = stl(decompFd, s.window="periodic")
deseasonal <- seasadj(decomp)
plot(decomp)
adf.test(decompFd, alternative = "stationary")
# Get acf
acf(decompFd, main = '')
Pacf(decompFd, main = '')
source('~/Desktop/Flaredown Prediction/Flaredown-Prediction/arima.R')
